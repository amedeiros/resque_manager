var search_data = {"index":{"searchIndex":["object","resque","failure","redis","job","plugins","chainedstatus","classoverrides","status","classoverridesandextensions","hash","worker","resquemanager","engine","resquescheduler","all_workers_in_pid_working()","completed()","configure()","continue()","counter()","counter()","counter_key()","enqueue_to()","farm_status()","filter_backtrace()","get_rake()","get_worker_path()","id()","included()","included()","incr_counter()","incr_counter()","ip()","local_ip()","name()","new()","overview_message()","overview_message=()","overview_message=()","pause()","pause!()","pause_key()","pause_processing()","paused()","paused?()","paused?()","perform()","perform()","pid()","pids()","prune_dead_workers()","queue()","queues()","queues_in_pid()","quit()","quit()","remove()","restart()","restart()","safe_perform!()","schedule()","schedule=()","shutdown()","start()","start()","startup()","thread()","throttle()","tick()","to_s()","unpause_processing()","unregister_worker()","work()","workers_in_pid()","working()","readme"],"longSearchIndex":["object","resque","resque::failure","resque::failure::redis","resque::job","resque::plugins","resque::plugins::chainedstatus","resque::plugins::chainedstatus::classoverrides","resque::plugins::status","resque::plugins::status::classoverridesandextensions","resque::plugins::status::hash","resque::worker","resquemanager","resquemanager::engine","resquescheduler","resque::worker#all_workers_in_pid_working()","resque::plugins::chainedstatus#completed()","resquemanager::configure()","resque::worker#continue()","resque::plugins::status#counter()","resque::plugins::status::classoverridesandextensions#counter()","resque::plugins::status::classoverridesandextensions#counter_key()","resque::plugins::chainedstatus::classoverrides#enqueue_to()","resquescheduler::farm_status()","resque::failure::redis#filter_backtrace()","object#get_rake()","object#get_worker_path()","resque::worker#id()","resque::plugins::chainedstatus::included()","resque::plugins::status::included()","resque::plugins::status#incr_counter()","resque::plugins::status::classoverridesandextensions#incr_counter()","resque::worker#ip()","resque::worker#local_ip()","resque::plugins::chainedstatus#name()","resque::plugins::status::new()","resque::worker#overview_message()","resque::plugins::status#overview_message=()","resque::worker#overview_message=()","resque::worker#pause()","resque::plugins::status#pause!()","resque::worker#pause_key()","resque::worker#pause_processing()","resque::worker#paused()","resque::plugins::status::hash#paused?()","resque::worker#paused?()","resque::job#perform()","resque::plugins::status::classoverridesandextensions#perform()","resque::worker#pid()","resquescheduler::pids()","resque::worker#prune_dead_workers()","resque::worker#queue()","resque::worker#queues()","resque::worker#queues_in_pid()","resque::worker#quit()","resquescheduler::quit()","resque::plugins::status::classoverridesandextensions#remove()","resque::worker#restart()","resquescheduler::restart()","resque::plugins::status#safe_perform!()","resquescheduler#schedule()","resquescheduler#schedule=()","resque::worker#shutdown()","resque::worker::start()","resquescheduler::start()","resque::worker#startup()","resque::worker#thread()","resque::throttle()","resque::plugins::status#tick()","resque::worker#to_s()","resque::worker#unpause_processing()","resque::worker#unregister_worker()","resque::worker#work()","resque::worker#workers_in_pid()","resque::worker::working()",""],"info":[["Object","","Object.html","",""],["Resque","","Resque.html","",""],["Resque::Failure","","Resque/Failure.html","",""],["Resque::Failure::Redis","","Resque/Failure/Redis.html","",""],["Resque::Job","","Resque/Job.html","",""],["Resque::Plugins","","Resque/Plugins.html","",""],["Resque::Plugins::ChainedStatus","","Resque/Plugins/ChainedStatus.html","",""],["Resque::Plugins::ChainedStatus::ClassOverrides","","Resque/Plugins/ChainedStatus/ClassOverrides.html","",""],["Resque::Plugins::Status","","Resque/Plugins/Status.html","",""],["Resque::Plugins::Status::ClassOverridesAndExtensions","","Resque/Plugins/Status/ClassOverridesAndExtensions.html","",""],["Resque::Plugins::Status::Hash","","Resque/Plugins/Status/Hash.html","",""],["Resque::Worker","","Resque/Worker.html","",""],["ResqueManager","","ResqueManager.html","",""],["ResqueManager::Engine","","ResqueManager/Engine.html","",""],["ResqueScheduler","","ResqueScheduler.html","",""],["all_workers_in_pid_working","Resque::Worker","Resque/Worker.html#method-i-all_workers_in_pid_working","()",""],["completed","Resque::Plugins::ChainedStatus","Resque/Plugins/ChainedStatus.html#method-i-completed","(*messages)",""],["configure","ResqueManager","ResqueManager.html#method-c-configure","()",""],["continue","Resque::Worker","Resque/Worker.html#method-i-continue","()",""],["counter","Resque::Plugins::Status","Resque/Plugins/Status.html#method-i-counter","(counter)",""],["counter","Resque::Plugins::Status::ClassOverridesAndExtensions","Resque/Plugins/Status/ClassOverridesAndExtensions.html#method-i-counter","(counter, uuid)",""],["counter_key","Resque::Plugins::Status::ClassOverridesAndExtensions","Resque/Plugins/Status/ClassOverridesAndExtensions.html#method-i-counter_key","(counter, uuid)","<p>If multiple workers are running at once and you need an incrementer, you\ncan&#39;t use the status&#39; …\n"],["enqueue_to","Resque::Plugins::ChainedStatus::ClassOverrides","Resque/Plugins/ChainedStatus/ClassOverrides.html#method-i-enqueue_to","(queue, klass, options = {})","<p>OVERRIDE to grab the uuid out of options so it can be chained to the\ncalling worker instead of creating …\n"],["farm_status","ResqueScheduler","ResqueScheduler.html#method-c-farm_status","()",""],["filter_backtrace","Resque::Failure::Redis","Resque/Failure/Redis.html#method-i-filter_backtrace","(backtrace)",""],["get_rake","Object","Object.html#method-i-get_rake","()",""],["get_worker_path","Object","Object.html#method-i-get_worker_path","()",""],["id","Resque::Worker","Resque/Worker.html#method-i-id","()",""],["included","Resque::Plugins::ChainedStatus","Resque/Plugins/ChainedStatus.html#method-c-included","(base)",""],["included","Resque::Plugins::Status","Resque/Plugins/Status.html#method-c-included","(base)","<p>OVERRIDE so we can add OverridesAndExtensionsClassMethods\n"],["incr_counter","Resque::Plugins::Status","Resque/Plugins/Status.html#method-i-incr_counter","(counter)",""],["incr_counter","Resque::Plugins::Status::ClassOverridesAndExtensions","Resque/Plugins/Status/ClassOverridesAndExtensions.html#method-i-incr_counter","(counter, uuid)",""],["ip","Resque::Worker","Resque/Worker.html#method-i-ip","()",""],["local_ip","Resque::Worker","Resque/Worker.html#method-i-local_ip","()",""],["name","Resque::Plugins::ChainedStatus","Resque/Plugins/ChainedStatus.html#method-i-name","()",""],["new","Resque::Plugins::Status","Resque/Plugins/Status.html#method-c-new","(uuid, worker = nil, options = {})","<p>Create a new instance with <code>uuid</code> and <code>options</code>\nOVERRIDE to add the worker attr\n"],["overview_message","Resque::Worker","Resque/Worker.html#method-i-overview_message","()",""],["overview_message=","Resque::Plugins::Status","Resque/Plugins/Status.html#method-i-overview_message-3D","(message)","<p>sets a message for the job on the overview page it can be set repeatedly\ndurring the job&#39;s processing …\n"],["overview_message=","Resque::Worker","Resque/Worker.html#method-i-overview_message-3D","(message)",""],["pause","Resque::Worker","Resque/Worker.html#method-i-pause","()",""],["pause!","Resque::Plugins::Status","Resque/Plugins/Status.html#method-i-pause-21","()","<p>Pause the current job, setting the status to &#39;paused&#39;\n"],["pause_key","Resque::Worker","Resque/Worker.html#method-i-pause_key","()","<p>When the worker gets the -USR2 signal, to_s may give a different value for\nthe thread and queue portion …\n"],["pause_processing","Resque::Worker","Resque/Worker.html#method-i-pause_processing","()","\n<pre>Stop processing jobs after the current one has completed (if we&#39;re\ncurrently running one).</pre>\n<p>OVERRIDE to …\n"],["paused","Resque::Worker","Resque/Worker.html#method-i-paused","()",""],["paused?","Resque::Plugins::Status::Hash","Resque/Plugins/Status/Hash.html#method-i-paused-3F","()","<p>The STATUSES constant is frozen, so we&#39;ll just manually add the paused?\nmethod here\n"],["paused?","Resque::Worker","Resque/Worker.html#method-i-paused-3F","()","<p>are we paused? OVERRIDE so UI can tell if we&#39;re paused\n"],["perform","Resque::Job","Resque/Job.html#method-i-perform","()","<p>Attempts to perform the work represented by this job instance. Calls\n#perform on the class given in the …\n"],["perform","Resque::Plugins::Status::ClassOverridesAndExtensions","Resque/Plugins/Status/ClassOverridesAndExtensions.html#method-i-perform","(uuid=nil, options = {})","<p>This is the method called by Resque::Worker when processing jobs. It\ncreates a new instance of the job …\n"],["pid","Resque::Worker","Resque/Worker.html#method-i-pid","()",""],["pids","ResqueScheduler","ResqueScheduler.html#method-c-pids","()","<p>Returns an array of string pids of all the other workers on this machine.\nUseful when pruning dead workers …\n"],["prune_dead_workers","Resque::Worker","Resque/Worker.html#method-i-prune_dead_workers","()","<p>Looks for any workers which should be running on this server and, if\nthey&#39;re not, removes them from …\n"],["queue","Resque::Worker","Resque/Worker.html#method-i-queue","()",""],["queues","Resque::Worker","Resque/Worker.html#method-i-queues","()","<p>OVERRIDE for multithreaded workers\n"],["queues_in_pid","Resque::Worker","Resque/Worker.html#method-i-queues_in_pid","()",""],["quit","Resque::Worker","Resque/Worker.html#method-i-quit","()",""],["quit","ResqueScheduler","ResqueScheduler.html#method-c-quit","(ips)",""],["remove","Resque::Plugins::Status::ClassOverridesAndExtensions","Resque/Plugins/Status/ClassOverridesAndExtensions.html#method-i-remove","(uuid)","<p>OVERRIDE to clear all the keys that have the UUI. status, counters, etc.\n"],["restart","Resque::Worker","Resque/Worker.html#method-i-restart","()",""],["restart","ResqueScheduler","ResqueScheduler.html#method-c-restart","(ips)",""],["safe_perform!","Resque::Plugins::Status","Resque/Plugins/Status.html#method-i-safe_perform-21","()","\n<pre>Run by the Resque::Worker when processing this job. It wraps the &lt;tt&gt;perform&lt;/tt&gt;\nmethod ensuring that ...</pre>\n"],["schedule","ResqueScheduler","ResqueScheduler.html#method-i-schedule","()","<p>Returns the schedule hash\n"],["schedule=","ResqueScheduler","ResqueScheduler.html#method-i-schedule-3D","(schedule_hash)",""],["shutdown","Resque::Worker","Resque/Worker.html#method-i-shutdown","()","\n<pre>Schedule this worker for shutdown. Will finish processing the\ncurrent job.</pre>\n<p>OVERRIDE for multithreaded …\n"],["start","Resque::Worker","Resque/Worker.html#method-c-start","(options)",""],["start","ResqueScheduler","ResqueScheduler.html#method-c-start","(ips)",""],["startup","Resque::Worker","Resque/Worker.html#method-i-startup","()","\n<pre>Runs all the methods needed when a worker begins its lifecycle.</pre>\n<p>OVERRIDE for multithreaded workers\n"],["thread","Resque::Worker","Resque/Worker.html#method-i-thread","()",""],["throttle","Resque","Resque.html#method-c-throttle","(queue, limit = 10000, sleep_for = 60)",""],["tick","Resque::Plugins::Status","Resque/Plugins/Status.html#method-i-tick","(*messages)","<p>sets the status of the job for the current iteration. You should use the\n<code>at</code> method if you have actual …\n"],["to_s","Resque::Worker","Resque/Worker.html#method-i-to_s","()","<p>The string representation is the same as the id for this worker instance.\nCan be used with `Worker.find …\n"],["unpause_processing","Resque::Worker","Resque/Worker.html#method-i-unpause_processing","()","\n<pre>Start processing jobs again after a pause</pre>\n<p>OVERRIDE to set remove redis key so UI knows it&#39;s unpaused …\n"],["unregister_worker","Resque::Worker","Resque/Worker.html#method-i-unregister_worker","()","<p>Unregisters ourself as a worker. Useful when shutting down. OVERRIDE to\nalso remove the pause key Would …\n"],["work","Resque::Worker","Resque/Worker.html#method-i-work","(interval = 5, &block)","\n<pre>This is the main workhorse method. Called on a Worker instance,\nit begins the worker life cycle.\n\nThe ...</pre>\n"],["workers_in_pid","Resque::Worker","Resque/Worker.html#method-i-workers_in_pid","()",""],["working","Resque::Worker","Resque/Worker.html#method-c-working","()","<p>logic for mappged_mget changed where it returns keys with nil values in\nlatest redis gem.\n"],["README","","README_rdoc.html","","<p>Resque UI has been renamed to Resque Manager to better reflect what this\nengine really does.  It manages …\n"]]}}